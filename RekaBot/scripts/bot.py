import asyncio
from datetime import datetime
from aiogram import Bot, Dispatcher, types
from aiogram.filters.command import Command
from aiogram.types import FSInputFile, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder
from config import TOKEN, CHANNEL_ID
from database import clear, get_database, start_data, add_number, add_promo_data
from promo import createPromo
from logger import logger

bot = Bot(token=TOKEN)
dp = Dispatcher()
unsubscribed_users = set()

async def periodic_messages():
    global unsubscribed_users
    file_path = 'RekaBot/images/DSC01779.jpg'
    photo = FSInputFile(path=file_path)

    builder = InlineKeyboardBuilder()
    builder.add(InlineKeyboardButton(text='üìù –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è', url='https://t.me/ok_reka', callback_data='_'))
    builder.add(InlineKeyboardButton(text='üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É', callback_data='checkSubscribe'))

    await asyncio.sleep(1)
    for user in unsubscribed_users:
        await bot.send_photo(chat_id=user, caption="""
–ë–∞–∑–∞ –æ—Ç–¥—ã—Ö–∞ –≤ –ó–≤–µ–Ω–∏–≥–æ—Ä–æ–¥–µ ‚Äì –±–µ—Å–µ–¥–∫–∏, 
—Å–∞—É–Ω–∞, –ø—Ä–∏—Ä–æ–¥–∞ –∏ —Ä–µ–∫–∞! 
–ú—ã –æ—Ç–ª–æ–∂–∏–ª–∏ –¥–ª—è –≤–∞—Å —Å–∫–∏–¥–∫—É 10%.
–û–Ω–∞ –µ—â–µ –∞–∫—Ç—É–∞–ª—å–Ω–∞?
–ï—Å–ª–∏ –¥–∞ ‚Äî –ø—Ä–æ—Å—Ç–æ –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ 
–Ω–∞—à—É –≥—Ä—É–ø–ø—É, –∏ —Å–∫–∏–¥–∫–∞ –≤–∞—à–∞!
–ë—É–¥–µ–º –í–∞—Å –∂–¥–∞—Ç—å
–•–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è! ‚òÄÔ∏è
""", photo=photo, reply_markup=builder.as_markup())

@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    global unsubscribed_users
    unsubscribed_users.add(message.chat.id)
    asyncio.create_task(periodic_messages())
    #–∫–∞—Ä—Ç–∏–Ω–∫–∞
    file_path = 'images/DSC01779.jpg'
    photo = FSInputFile(path=file_path)
    #–∫–Ω–æ–ø–∫–∞
    kb = [[KeyboardButton(text='üéÅ –ü–æ–ª—É—á–∏—Ç—å —Å–∫–∏–¥–∫—É', request_contact=True)]]
    keyboard = ReplyKeyboardMarkup(keyboard=kb)

    start_data(id=message.from_user.id, username=message.from_user.username, firstDate=datetime.now())

    await bot.send_photo(photo=photo,
        caption="""–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!
–ü–æ–ª—É—á–∏—Ç–µ —Å–∫–∏–¥–∫—É 10% –Ω–∞ –ø—Ä–æ–∂–∏–≤–∞–Ω–∏–µ –≤ 
–Ω–∞—à–∏—Ö —É—é—Ç–Ω—ã—Ö –±—É–Ω–≥–∞–ª–æ –∏ –≥–ª—ç–º–ø–∏–Ω–≥–µ!""", chat_id=message.chat.id, reply_markup=keyboard)

@dp.message(Command("users"))
async def send_database(message: types.Message):
    get_database()
    file = FSInputFile(path='copies/backup.sql')
    await bot.send_message(message.chat.id, '–ö–æ–ø–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö üìã')
    await bot.send_document(message.chat.id, file)

@dp.message(Command("clear"))
async def clear_database(message: types.Message):
    clear()
    await bot.send_message(message.chat.id, '–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –æ—á–∏—â–µ–Ω–∞ üßπ')

@dp.message(lambda message: message.contact is not None)
async def handle_contact(message: types.Message):
    chat_id = message.chat.id
    user_id = message.from_user.id
    chat_member = await bot.get_chat_member(chat_id=CHANNEL_ID, user_id=user_id)
    phone = message.contact.phone_number[0:] 
    print(phone)

    try:
        if chat_member.status in ['member', 'administrator', 'creator']:
            await subscribed_handler(chat_id=chat_id, user_id=user_id)
            add_number(phone,message.from_user.id)
            unsubscribed_users.discard(user_id)
        else:
            await not_subscribed_handler(chat_id=chat_id)
            unsubscribed_users.add(user_id)
    except Exception as e:
        logger.critical(e)
        

async def subscribed_handler(chat_id, user_id):
    builder = InlineKeyboardBuilder()
    builder.add(InlineKeyboardButton(text='üéÅ –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å —Å–æ —Å–∫–∏–¥–∫–æ–π', callback_data='book', url='https://ok-reka.ru/'))
    builder.add(InlineKeyboardButton(text='üì≤ –ù–∞–ø–∏—Å–∞—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä—É', callback_data='manager'))
    photo_path = 'images/DSC_1062_3d_logo.jpg'
    photo = FSInputFile(path=photo_path)
    promo = createPromo()

    add_promo_data(promo=promo, discount=10, date=datetime.now(), id = user_id)
    await bot.send_photo(chat_id=chat_id, caption=f"""
–í—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã!
–í–∞—à –ø—Ä–æ–º–æ–∫–æ–¥ –Ω–∞ —Å–∫–∏–¥–∫—É
{promo}
–ü—Ä–∏–º–µ–Ω–∏—Ç–µ –µ–≥–æ –ø—Ä–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏
–Ω–∞ —Å–∞–π—Ç–µ ok-reka.ru""", photo=photo, reply_markup=builder.as_markup())
    
async def not_subscribed_handler(chat_id):
    builder = InlineKeyboardBuilder()
    builder.add(InlineKeyboardButton(text="üìù –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è", callback_data="subscribe", url="https://t.me/ok_reka"))
    builder.add(InlineKeyboardButton(text="üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="checkSubscribe"))
    await bot.send_message(chat_id=chat_id, text = """
–°–∫–∏–¥–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–∞
—Ç–æ–ª—å–∫–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º –≥—Ä—É–ø–ø—ã
https://t.me/ok_reka
–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—Å!
–í—Å–µ–≥–æ 2 –ø—Ä–æ—Å—Ç—ã—Ö —à–∞–≥–∞:
1. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è" –∏ 
–≤—Å—Ç—É–ø–∏—Ç–µ –≤ –Ω–∞—à—É –≥—Ä—É–ø–ø—É.
2. –í–µ—Ä–Ω–∏—Ç–µ—Å—å —Å—é–¥–∞ –∏ –Ω–∞–∂–º–∏—Ç–µ 
"–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É"
""", reply_markup=builder.as_markup())

async def manager_handler(chat_id):
    await bot.send_message(chat_id=chat_id, text="–¢–µ–ª–µ—Ñ–æ–Ω: +74991112727\n–¢–µ–ª–µ–≥—Ä–∞–º–º: @OK_REKA22")

@dp.callback_query()
async def handle_callback(callback_query: types.CallbackQuery):
    global unsubscribed_users
    data = callback_query.data
    user_id = callback_query.from_user.id
    chat_id = callback_query.message.chat.id
    chat_member = await bot.get_chat_member(chat_id=CHANNEL_ID, user_id=user_id)

    if data == 'manager':
        await manager_handler(chat_id=chat_id)

    if data == 'checkSubscribe' and chat_member.status in ['member', 'administrator','creator']:
        await subscribed_handler(chat_id=chat_id, user_id=user_id)
    else:
        await not_subscribed_handler(chat_id=chat_id)

async def main():
    await dp.start_polling(bot)

asyncio.run(main())